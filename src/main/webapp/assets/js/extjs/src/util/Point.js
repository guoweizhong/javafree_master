Ext.define("Ext.util.Point",{extend:"Ext.util.Region",isPoint:true,radianToDegreeConstant:180/Math.PI,origin:{x:0,y:0},statics:{fromEvent:function(b){var a=b.changedTouches,c=(a&&a.length>0)?a[0]:b;return this.fromTouch(c);},fromTouch:function(a){return new this(a.pageX,a.pageY);},from:function(a){if(!a){return new this(0,0);
}if(!(a instanceof this)){return new this(a.x,a.y);}return a;}},constructor:function(a,b){if(a==null){a=0;}if(b==null){b=0;}this.callParent([b,a,b,a]);},clone:function(){return new this.self(this.x,this.y);},copy:function(){return this.clone.apply(this,arguments);},copyFrom:function(a){this.x=a.x;this.y=a.y;
return this;},toString:function(){return"Point["+this.x+","+this.y+"]";},equals:function(a){return(this.x===a.x&&this.y===a.y);},isCloseTo:function(c,b){if(typeof b=="number"){return this.getDistanceTo(c)<=b;}var a=c.x,f=c.y,e=b.x,d=b.y;return(this.x<=a+e&&this.x>=a-e&&this.y<=f+d&&this.y>=f-d);},isWithin:function(){return this.isCloseTo.apply(this,arguments);
},isContainedBy:function(a){if(!(a instanceof Ext.util.Region)){a=Ext.get(a.el||a).getRegion();}return a.contains(this);},roundedEquals:function(a){if(!a||typeof a!=="object"){a=this.origin;}return(Math.round(this.x)===Math.round(a.x)&&Math.round(this.y)===Math.round(a.y));},getDistanceTo:function(b){if(!b||typeof b!=="object"){b=this.origin;
}var c=this.x-b.x,a=this.y-b.y;return Math.sqrt(c*c+a*a);},getAngleTo:function(b){if(!b||typeof b!=="object"){b=this.origin;}var c=this.x-b.x,a=this.y-b.y;return Math.atan2(a,c)*this.radianToDegreeConstant;}},function(){this.prototype.translate=this.prototype.translateBy;});