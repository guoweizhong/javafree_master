Ext.define("Ext.plugin.MouseEnter",{extend:"Ext.plugin.Abstract",alias:"plugin.mouseenter",element:"el",init:function(a){if(!this.delegate){Ext.raise("mouseenter plugin must be configured with a delegate selector");}if(!this.handler){Ext.raise("mouseenter plugin must be configured with handler callback");
}var d=this,c={mouseover:"onMouseEvent",scope:d,destroyable:true},b=d.element;if(d.leaveHandler||d.delay){c.mouseout="onMouseEvent";}if(typeof b==="string"){b=a[d.element];}if(b){d.mouseListener=Ext.get(b).on(c);}else{a.on({render:function(){d.mouseListener=a[d.element].on(c);},single:true});}},onMouseEvent:function(c){var b=this,a=c.getTarget(b.delegate);
if(a&&a!==c.getRelatedTarget(b.delegate)){if(b.delay){clearTimeout(b.mouseEventTimer);b.mouseEventTimer=Ext.defer(b.handleMouseEvent,b.delay,b,[c,a]);}else{b.handleMouseEvent(c,a);}}},handleMouseEvent:function(c,a){var b=this;if(c.type==="mouseover"){Ext.callback(b.handler,null,[c,a],0,b.cmp,b.scope);
}else{if(b.leaveHandler){Ext.callback(b.leaveHandler,null,[c,a],0,b.cmp,b.scope);}}},destroy:function(){Ext.destroy(this.mouseListener);this.callParent();}});