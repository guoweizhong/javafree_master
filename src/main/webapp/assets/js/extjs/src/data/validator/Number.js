Ext.define("Ext.data.validator.Number",{extend:"Ext.data.validator.Validator",alias:"data.validator.number",type:"number",config:{decimalSeparator:undefined,message:"Is not a valid number",thousandSeparator:undefined},constructor:function(a){this.callParent([a]);this.rebuildMatcher();},applyDecimalSeparator:function(a){return a===undefined?Ext.util.Format.decimalSeparator:a;
},updateDecimalSeparator:function(){this.rebuildMatcher();},applyThousandSeparator:function(a){return a===undefined?Ext.util.Format.thousandSeparator:a;},updateThousandSeparator:function(){this.rebuildMatcher();},validate:function(b){var c=this.matcher,a=c.test(b);return a?a:this.getMessage();},privates:{getMatcherText:function(a){var b=Ext.String.escapeRegex(this.getThousandSeparator()),e=Ext.String.escapeRegex(this.getDecimalSeparator()),c="(\\d{1,3}("+b+"\\d{3})*("+e+"\\d+)?|"+e+"\\d+)";
if(!a){c=this.getSignPart()+c;}return c;},getSignPart:function(){return"(\\+|\\-)?";},rebuildMatcher:function(){if(!this.isConfiguring){this.matcher=new RegExp("^"+this.getMatcherText()+"$");}}}});