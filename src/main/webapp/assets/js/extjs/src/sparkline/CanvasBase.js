Ext.define("Ext.sparkline.CanvasBase",{requires:["Ext.sparkline.Shape"],shapeCount:0,_pxregex:/(\d+)(px)?\s*$/i,constructor:function(a){this.owner=a;this.rtl=this.owner.getInherited().rtl;},setWidth:function(a){this.pixelWidth=a;},setHeight:function(a){this.pixelHeight=a;},drawLine:function(c,e,b,d,f,a){return this.drawShape([[c,e],[b,d]],f,a);
},drawShape:function(c,b,d,a){return this._genShape("Shape",[c,b,d,a]);},drawCircle:function(c,f,b,d,e,a){return this._genShape("Circle",[c,f,b,d,e,a]);},drawPieSlice:function(b,g,a,d,c,e,f){return this._genShape("PieSlice",[b,g,a,d,c,e,f]);},drawRect:function(b,f,c,a,d,e){return this._genShape("Rect",[b,f,c,a,d,e]);
},getElement:function(){return this.el;},getLastShapeId:function(){return this.lastShapeId;},reset:function(){Ext.raise("reset not implemented");},_genShape:function(b,a){var c=this.shapeCount++;a.unshift(c);return new Ext.sparkline.Shape(this,c,b,a);},appendShape:function(a){Ext.raise("appendShape not implemented");
},replaceWithShape:function(b,a){Ext.raise("replaceWithShape not implemented");},insertAfterShape:function(b,a){Ext.raise("insertAfterShape not implemented");},removeShapeId:function(a){Ext.raise("removeShapeId not implemented");},getShapeAt:function(a,b){Ext.raise("getShapeAt not implemented");},render:function(){Ext.raise("render not implemented");
}});